'use strict'

// eslint globals for CIDME
/* global Cidme, Ajv, UUID */
// eslint globals for JS
/* global alert */
// eslint globals for JQuery
/* global $ */
// eslint globals for Cordova
/* global cordova, device */
// eslint globals for ???
/* global FileReader, FileError, Blob */

let cidme = new Cidme(new Ajv({ schemaId: 'auto' }), UUID, false)
let currentEntity = ''

$('#ce_createEntity').on('touchend', function () { pkmAction('createEntity') })
$('#ce_createEntity').on('click', function () {
  if (device.platform.toLowerCase() !== 'android') {
    pkmAction('createEntity')
  }
})

$('#ce_viewEntity').on('touchend', function () { pkmAction('viewEntity') })
$('#ce_viewEntity').on('click', function () {
  if (device.platform.toLowerCase() !== 'android') {
    pkmAction('viewEntity')
  }
})

$('#ce_downloadEntity').on('touchend', function () { pkmAction('downloadEntity') })
$('#ce_downloadEntity').on('click', function () {
  if (device.platform.toLowerCase() !== 'android') {
    pkmAction('downloadEntity')
  }
})

$('#ce_readFile').on('touchend', function () { pkmReadFile('example.json') })
$('#ce_readFile').on('click', function () {
  if (device.platform.toLowerCase() !== 'android') {
    pkmReadFile('example.json')
  }
})

$('#ce_writeFile').on('touchend', function () { pkmWriteFile('example.json') })
$('#ce_writeFile').on('click', function () {
  if (device.platform.toLowerCase() !== 'android') {
    pkmWriteFile('example.json')
  }
})

$('#ce_testGet').on('touchend', function () { pkmTestGet() })
$('#ce_testGet').on('click', function () {
  if (device.platform.toLowerCase() !== 'android') {
    pkmTestGet()
  }
})

document.forms['fileUploadForm'].elements['fileUpload'].onchange = function (evt) {
  if (!window.FileReader) {
    alert('ERROR: This functionality does not work in your browser.')

    return false
  }

  var reader = new FileReader()

  reader.onload = function (evt) {
    if (evt.target.readyState !== 2) return
    if (evt.target.error) {
      alert('ERROR: An unexpected error occured while uploading file.')
      return
    }

    // filecontent = evt.target.result;

    if (cidme.validate(JSON.parse(evt.target.result)) === false) {
      alert('ERROR:  Invalid CIDME Entity uploaded.')
    } else {
      currentEntity = JSON.parse(evt.target.result)
      document.getElementById('ce_entityData').value = JSON.stringify(currentEntity, null, 2)
      pkmVisualizeEntity()
    }
  }

  reader.readAsText(evt.target.files[0])
}

document.getElementById('ce_entityData').onchange = function () {
  // alert('Change detected!')
  if (cidme.validate(JSON.parse(document.getElementById('ce_entityData').value)) === false) {
    alert('ERROR:  Invalid CIDME Entity.')
  } else {
    currentEntity = JSON.parse(document.getElementById('ce_entityData').value)
    pkmVisualizeEntity()
  }
}

function pkmAction (action) {
  // alert(action);

  if (action === 'createEntity') {
    // alert(JSON.stringify(cidme.createEntityResource()));
    currentEntity = cidme.createEntityResource()

    // document.forms['fileUploadForm'].elements['fileUploadData'].value = JSON.stringify(currentEntity)
    document.getElementById('ce_entityData').value = JSON.stringify(currentEntity, null, 2)
    pkmVisualizeEntity()

    // alert('Entity created.')
  } else if (action === 'viewEntity') {
    // alert(JSON.stringify(currentEntity))
  } else if (action === 'downloadEntity') {
    if (device.platform.toLowerCase() === 'android') {
      alert('ERROR: This functionality does not work in your browser.')
    } else {
      pkmDownloadFile('Entity.cidme', JSON.stringify(currentEntity))
    }
  } else {
    alert('ERROR: UNKNOWN ACTION REQUESTED')
  }

  return true
}

function pkmReadFile (fileName) {
  if (device.platform.toLowerCase() === 'browser') {
    alert('ERROR: This functionality does not work in the browser.')

    return false
  }

  readFromFile(fileName, function (data) {
    if (cidme.validate(JSON.parse(data)) === false) {
      alert('ERROR:  Invalid CIDME Entity uploaded.')
    } else {
      currentEntity = JSON.parse(data)
      document.getElementById('ce_entityData').value = JSON.stringify(currentEntity, null, 2)
      pkmVisualizeEntity()
    }
  })
}

function pkmWriteFile (fileName) {
  if (device.platform.toLowerCase() === 'browser') {
    alert('ERROR: This functionality does not work in the browser.')

    return false
  }

  // writeToFile(fileName, JSON.stringify(cidme.createEntityResource()))
  writeToFile(fileName, JSON.stringify(currentEntity))
}

function pkmDownloadFile (filename, text) {
  var element = document.createElement('a')
  element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text))
  // element.setAttribute('href', 'data:application/octet-stream,' + encodeURIComponent(text))
  element.setAttribute('download', filename)

  element.style.display = 'none'
  document.body.appendChild(element)

  element.click()

  document.body.removeChild(element)
}

function pkmVisualizeEntity () {
  $('div#ce_entityView').replaceWith('<div id="ce_entityView"></div>')

  if (currentEntity === '' || cidme.validate(currentEntity) === false) { return false }

  pkmVisualizeEntityItem(currentEntity, null)

  return true
}

function pkmVisualizeEntityItem (entityItem, parentItem) {
  if (entityItem['@type'] === 'Entity') {
    $('<div id="' + cidme.parseCidmeUri(entityItem['@id'])['id'] + '" class="ce_CidmeEntityResource"> \
                <div id="' + cidme.parseCidmeUri(entityItem['@id'])['id'] + '_control" class="ce_CidmeResourceControl"> \
                </div> \
                <div id="' + cidme.parseCidmeUri(entityItem['@id'])['id'] + '_header" class="ce_CidmeEntityHeader"> \
                    Type: ' + entityItem['@type'] + '<br /> \
                    ID: ' + entityItem['@id'] + '<br /> \
                </div> \
                <div id="' + cidme.parseCidmeUri(entityItem['@id'])['id'] + '_metadata_control"> \
                       Metadata: &nbsp; \
                </div> \
                    <br /> \
                <div id="' + cidme.parseCidmeUri(entityItem['@id'])['id'] + '_metadata"> \
                </div> \
                <div id="' + cidme.parseCidmeUri(entityItem['@id'])['id'] + '_entityContexts"> \
                    <br /> \
                    EntityContexts:<br /> \
                </div> \
           </div>').appendTo('div#ce_entityView')

    pkmVisualizeAddResourceControl(entityItem['@id'])

    console.log('Appending Entity: ' + entityItem['@id'])

    pkmVisualizeEntityItemMetadata(entityItem, entityItem['@id'])

    if (entityItem.hasOwnProperty('entityContexts') && entityItem['entityContexts'].length > 0) {
      for (let i = 0; i < entityItem['entityContexts'].length; i++) {
        pkmVisualizeEntityItem(entityItem['entityContexts'][i], entityItem['@id'])
      }
    }
  } else if (entityItem['@type'] === 'EntityContext') {
    $('<div id="' + cidme.parseCidmeUri(entityItem['@id'])['id'] + '" class="ce_CidmeEntityContextResource"> \
                <div id="' + cidme.parseCidmeUri(entityItem['@id'])['id'] + '_control" class="ce_CidmeResourceControl"> \
                </div> \
                <div id="' + cidme.parseCidmeUri(entityItem['@id'])['id'] + '_header" class="ce_CidmeEntityContextHeader"> \
                    Type: ' + entityItem['@type'] + '<br /> \
                    ID: ' + entityItem['@id'] + '<br /> \
                </div> \
                <div id="' + cidme.parseCidmeUri(entityItem['@id'])['id'] + '_metadata_control"> \
                       Metadata: &nbsp; \
                </div> \
                <br /> \
                <div id="' + cidme.parseCidmeUri(entityItem['@id'])['id'] + '_metadata"> \
                </div> \
                <div id="' + cidme.parseCidmeUri(entityItem['@id'])['id'] + '_entityContexts"> \
                    <br /> \
                    EntityContexts:<br /> \
                </div> \
           </div>').appendTo('#' + cidme.parseCidmeUri(parentItem)['id'] + '_entityContexts')

    pkmVisualizeAddResourceControl(entityItem['@id'])

    console.log('Appending EntityContext: ' + entityItem['@id'])

    pkmVisualizeEntityItemMetadata(entityItem, entityItem['@id'])

    if (entityItem.hasOwnProperty('entityContexts') && entityItem['entityContexts'].length > 0) {
      for (let i = 0; i < entityItem['entityContexts'].length; i++) {
        pkmVisualizeEntityItem(entityItem['entityContexts'][i], entityItem['@id'])
      }
    }
  }

  return true
}

function pkmVisualizeEntityItemMetadata (entityItem, parentItem) {
  // pkmVisualizeAddResourceControl (entityItem['metadata'][i]['@id'], true)
  pkmVisualizeAddResourceControl(parentItem, true)

  if (entityItem.hasOwnProperty('metadata') && entityItem['metadata'].length > 0) {
    for (let i = 0; i < entityItem['metadata'].length; i++) {
      $('<div id="' + cidme.parseCidmeUri(entityItem['metadata'][i]['@id'])['id'] + '" class="ce_CidmeMetadataGroupResource"> \
                   <div id="' + cidme.parseCidmeUri(entityItem['metadata'][i]['@id'])['id'] + '_control" class="ce_CidmeResourceControl"> \
                   </div> \
                   <div id="' + cidme.parseCidmeUri(entityItem['metadata'][i]['@id'])['id'] + '_header" class="ce_CidmeMetadataGroupHeader"> \
                       Type: ' + entityItem['metadata'][i]['@type'] + '<br /> \
                       ID: ' + entityItem['metadata'][i]['@id'] + '<br /> \
                   </div> \
                   <div id="' + cidme.parseCidmeUri(entityItem['metadata'][i]['@id'])['id'] + '_data" class="ce_CidmeData"> \
                   <br /> \
                   </div> \
                   <div id="' + cidme.parseCidmeUri(entityItem['metadata'][i]['@id'])['id'] + '_metadata_control"> \
                       Metadata: &nbsp; \
                   </div> \
                   <br /> \
                   <div id="' + cidme.parseCidmeUri(entityItem['metadata'][i]['@id'])['id'] + '_metadata"> \
                   </div> \
            </div>').appendTo('#' + cidme.parseCidmeUri(parentItem)['id'] + '_metadata')

      // pkmVisualizeEntityItemMetadata(entityItem['metadata'][i], entityItem['@id'])
      pkmVisualizeEntityItemMetadata(entityItem['metadata'][i], entityItem['metadata'][i]['@id'])
      // pkmVisualizeEntityItemData(entityItem['metadata'][i], entityItem['@id'])
      pkmVisualizeEntityItemData(entityItem['metadata'][i], entityItem['metadata'][i]['@id'])

      console.log('Appending Metadata: ' + entityItem['metadata'][i]['@id'])

      pkmVisualizeAddResourceControl(entityItem['metadata'][i]['@id'])
    }
  }

  return true
}

function pkmVisualizeAddResourceControl (parentItem, metadata) {
  if (!metadata || metadata !== true) { metadata = false } else { metadata = true }

  var parentItemId = cidme.parseCidmeUri(parentItem)['id']
  if (metadata === true) { parentItemId += '_metadata' }

  // $('<span id="' + cidme.parseCidmeUri(parentItem)['id'] + '_controlHide" class="ce_CidmeResourceHide"> \
  $('<span id="' + parentItemId + '_controlHide" class="ce_CidmeResourceHide"> \
            -\
    </span>').appendTo('#' + parentItemId + '_control')
  // </span>').appendTo('#' + cidme.parseCidmeUri(parentItem)['id'] + '_control')

  // $('<span id="' + cidme.parseCidmeUri(parentItem)['id'] + '_controlShow" class="ce_CidmeResourceShow"> \
  $('<span id="' + parentItemId + '_controlShow" class="ce_CidmeResourceShow"> \
            +\
    </span>').appendTo('#' + parentItemId + '_control')
  // </span>').appendTo('#' + cidme.parseCidmeUri(parentItem)['id'] + '_control')

  // $('#' + cidme.parseCidmeUri(parentItem)['id'] + '_controlShow').hide();
  $('#' + parentItemId + '_controlShow').hide()

  // $('<span id="' + cidme.parseCidmeUri(parentItem)['id'] + '_controlDelete" class="ce_CidmeResourceDelete"> \
  $('<span id="' + parentItemId + '_controlDelete" class="ce_CidmeResourceDelete"> \
            X\
    </span>').appendTo('#' + parentItemId + '_control')
  // </span>').appendTo('#' + cidme.parseCidmeUri(parentItem)['id'] + '_control')

  /*
  $(document).on('click', '#' + cidme.parseCidmeUri(parentItem)['id'] + '_controlHide', function () {
    $('#' + cidme.parseCidmeUri(parentItem)['id'] + '_header').hide()
    $('#' + cidme.parseCidmeUri(parentItem)['id'] + '_controlHide').hide()
    $('#' + cidme.parseCidmeUri(parentItem)['id'] + '_controlShow').show()
    $('#' + cidme.parseCidmeUri(parentItem)['id'] + '_metadata').hide()
    $('#' + cidme.parseCidmeUri(parentItem)['id'] + '_data').hide()
    $('#' + cidme.parseCidmeUri(parentItem)['id'] + '_entityContexts').hide()

    // console.log('Clicked Hide');
  })
  */
  $(document).on('click', '#' + parentItemId + '_controlHide', function () {
    $('#' + parentItemId + '_controlHide').hide()
    $('#' + parentItemId + '_controlShow').show()

    if (metadata === true) {
      $('#' + parentItemId).hide()
    } else {
      $('#' + parentItemId + '_header').hide()
      $('#' + parentItemId + '_metadata').hide()
      $('#' + parentItemId + '_data').hide()
      $('#' + parentItemId + '_entityContexts').hide()
    }

    // console.log('Clicked Hide');
  })

  /*
  $(document).on('click', '#' + cidme.parseCidmeUri(parentItem)['id'] + '_controlShow', function () {
    $('#' + cidme.parseCidmeUri(parentItem)['id'] + '_header').show()
    $('#' + cidme.parseCidmeUri(parentItem)['id'] + '_controlShow').hide()
    $('#' + cidme.parseCidmeUri(parentItem)['id'] + '_controlHide').show()
    $('#' + cidme.parseCidmeUri(parentItem)['id'] + '_metadata').show()
    $('#' + cidme.parseCidmeUri(parentItem)['id'] + '_data').show()
    $('#' + cidme.parseCidmeUri(parentItem)['id'] + '_entityContexts').show()

    // console.log('Clicked Show');
  })
  */
  $(document).on('click', '#' + parentItemId + '_controlShow', function () {
    $('#' + parentItemId + '_controlShow').hide()
    $('#' + parentItemId + '_controlHide').show()

    if (metadata === true) {
      $('#' + parentItemId).show()
    } else {
      $('#' + parentItemId + '_header').show()
      $('#' + parentItemId + '_metadata').show()
      $('#' + parentItemId + '_data').show()
      $('#' + parentItemId + '_entityContexts').show()
    }

    // console.log('Clicked Show');
  })

  // $(document).on('click', '#' + cidme.parseCidmeUri(parentItem)['id'] + '_controlDelete', function () {
  $(document).on('click', '#' + parentItemId + '_controlDelete', function () {
    console.log('Clicked Delete')

    // if (confirm('Are you sure you wish to delete this ' + cidme.parseCidmeUri(parentItem)['resourceType'] + '?')) {
    pkmDelete(parentItem)
    // console.log('Delete confirmed.');
    // }

    // console.log('Clicked Delete');
  })

  return true
}

function pkmDelete (resourceId) {
  /*
    currentEntity = cidme.deleteResource(resourceId, currentEntity);

    document.getElementById('ce_entityData').value = ''
    document.getElementById('ce_entityData').value = JSON.stringify(currentEntity, null, 2)
    pkmVisualizeEntity();
    */

  document.getElementById('ce_entityData').value = JSON.stringify(cidme.deleteResource(resourceId, currentEntity), null, 2)
  // currentEntity = JSON.parse(document.getElementById('ce_entityData').value)
  // pkmVisualizeEntity();

  // $('#' + cidme.parseCidmeUri(resourceId)['id'] + '_controlHide').click()
  $('#' + cidme.parseCidmeUri(resourceId)['id']).hide()
}

function pkmVisualizeEntityItemData (entityItem, parentItem) {
  if (entityItem.hasOwnProperty('data') && entityItem['data'].length > 0) {
    for (let i = 0; i < entityItem['data'].length; i++) {
      for (var property in entityItem['data'][i]) {
        if (entityItem['data'][i].hasOwnProperty(property)) {
          if (
            typeof property === 'string' &&
                        (
                          property === '@type' ||
                             property.substring(0, 1) !== '@'
                        )
          ) {
            $('<div id="' + cidme.parseCidmeUri(parentItem)['id'] + '_data_' + i + '_' + property + '" class="ce_CidmeDataItem"> \
                            ' + property + ': ' + entityItem['data'][i][property] + ' \
                        </div>').appendTo('#' + cidme.parseCidmeUri(parentItem)['id'] + '_data')

            console.log('Appending Data.')
          }
        }
      }
    }
  }

  return true
}

function readFromFile (fileName, cb) {
  var pathToFile = cordova.file.dataDirectory + fileName
  window.resolveLocalFileSystemURL(pathToFile, function (fileEntry) {
    fileEntry.file(function (file) {
      var reader = new FileReader()

      // reader.onloadend = function (e) {
      reader.onloadend = function () {
        cb(JSON.parse(this.result))
      }

      reader.readAsText(file)
    }, errorHandler.bind(null, fileName))
  }, errorHandler.bind(null, fileName))
}

function writeToFile (fileName, data) {
  data = JSON.stringify(data, null, '\t')
  window.resolveLocalFileSystemURL(cordova.file.dataDirectory, function (directoryEntry) {
    directoryEntry.getFile(fileName, { create: true }, function (fileEntry) {
      fileEntry.createWriter(function (fileWriter) {
        // fileWriter.onwriteend = function (e) {
        fileWriter.onwriteend = function () {
          // for real-world usage, you might consider passing a success callback
          console.log('Write of file "' + fileName + '"" completed.')
        }

        fileWriter.onerror = function (e) {
          // you could hook this up with our global error handler, or pass in an error callback
          console.log('Write failed: ' + e.toString())
        }

        var blob = new Blob([data], { type: 'text/plain' })
        fileWriter.write(blob)
      }, errorHandler.bind(null, fileName))
    }, errorHandler.bind(null, fileName))
  }, errorHandler.bind(null, fileName))
}

function errorHandler (fileName, e) {
  var msg = ''

  switch (e.code) {
    case FileError.QUOTA_EXCEEDED_ERR:
      msg = 'Storage quota exceeded'
      break
    case FileError.NOT_FOUND_ERR:
      msg = 'File not found'
      break
    case FileError.SECURITY_ERR:
      msg = 'Security error'
      break
    case FileError.INVALID_MODIFICATION_ERR:
      msg = 'Invalid modification'
      break
    case FileError.INVALID_STATE_ERR:
      msg = 'Invalid state'
      break
    default:
      msg = 'Unknown error'
      break
  };

  console.log('Error (' + fileName + '): ' + msg)
  alert('Error (' + fileName + '): ' + msg)
}

function pkmTestGet () {
  alert('TESTING GET...')

  //  url : "https://ionic/index.html",
  //  url : "https://joethielen.dyndns.org",
  //  url : "https://cidme/x.php",
  //  url : "https://joethielen.dyndns.org/automite/automite.php?automite_cmd=beeper&automite_key=12345543210987667890",
  $.ajax({
    type: 'GET',
    url: 'https://joethielen.dyndns.org/x.php'
  })
    .done(function (data) {
      alert(data)
    })
    .fail(function () {
      alert('Error fetching data.')
    })
}
